{"version":3,"file":"static/js/898.40b2902c.chunk.js","mappings":"+NAEaA,EAAYC,EAAAA,GAAAA,IAAH,yOAYA,qBAAGC,MAAkBC,OAAOC,OAA5B,IAGTC,EAAUJ,EAAAA,GAAAA,IAAH,qcAYE,qBAAGC,MAAkBC,OAAOC,OAA5B,IAcM,qBAAGF,MAAkBC,OAAOG,KAA5B,IAIfC,EAAQN,EAAAA,GAAAA,IAAH,uKAOLO,EAAcP,EAAAA,GAAAA,IAAH,yHAOXQ,EAAQR,EAAAA,GAAAA,EAAH,oOAGD,qBAAGC,MAAkBQ,MAAMN,QAAQO,MAAnC,IACA,qBAAGT,MAAkBQ,MAAMN,QAAQQ,MAAnC,IAGN,qBAAGV,MAAkBC,OAAOG,KAA5B,IAI0B,qBAAGJ,MAAkBC,OAAOU,MAA5B,IAGxBC,GAAWb,EAAAA,EAAAA,IAAOQ,EAAPR,CAAH,4C,mBClERD,EAAYC,EAAAA,GAAAA,OAAH,gdAOA,gBAAGc,EAAH,EAAGA,SAAH,OAAkBC,EAAAA,GAAAA,UAAqBD,EAAvC,IACc,qBAAGb,MAAkBC,OAAOU,MAA5B,IAaR,gBAAGE,EAAH,EAAGA,SAAH,OAAkBC,EAAAA,GAAAA,OAAkBD,EAApC,IAOfE,EAAShB,EAAAA,GAAAA,IAAH,gGAMNI,EAAUJ,EAAAA,GAAAA,IAAH,4MASE,gBAAGc,EAAH,EAAGA,SAAH,OAAkBC,EAAAA,GAAAA,OAAkBD,EAApC,IAGTG,EAAcjB,EAAAA,GAAAA,EAAH,2SAKP,qBAAGC,MAAkBQ,MAAMN,QAAQO,MAAnC,IACA,qBAAGT,MAAkBQ,MAAMN,QAAQQ,MAAnC,IACF,qBAAGV,MAAkBQ,MAAMN,QAAQe,QAAnC,IAEJ,qBAAGjB,MAAkBC,OAAOG,KAA5B,IAK0B,qBAAGJ,MAAkBC,OAAOU,MAA5B,I,SC3D/BO,EAAwB,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,KAAV,OAC5B,UAAC,EAAD,CAAaP,SAAUO,EAAvB,WACE,SAAC,EAAD,WACE,SAAC,IAAD,CAAaC,KAAMP,EAAAA,GAAAA,OAAkBM,QAEvC,SAAC,EAAD,CAAWP,SAAUO,EAArB,UACE,SAAC,EAAD,UAAgBD,QANQ,EAW9B,GAAeG,EAAAA,EAAAA,MAAKJ,GCkCpB,EAhD2B,WACzB,OAA0BK,EAAAA,EAAAA,UAA0B,CAAC,GAArD,eAAOC,EAAP,KAAcC,EAAd,KAsBA,OApBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAeC,aAAaC,QAAQ,wBACtCF,GACFF,EAASK,KAAKC,MAAMJ,GAEvB,GAAE,KAEHD,EAAAA,EAAAA,YAAU,WACR,IAAMM,EAAoB,SAACC,GACzB,IAAQC,EAAkBD,EAAlBC,IAAKC,EAAaF,EAAbE,SACD,yBAARD,GACFT,EAASU,EAAWL,KAAKC,MAAMI,GAAY,CAAC,EAE/C,EAID,OAFAC,OAAOC,iBAAiB,UAAWL,GAE5B,kBAAMI,OAAOE,oBAAoB,UAAWN,EAA5C,CACR,GAAE,CAACP,KAGF,SAAC,EAAD,WACE,SAAC,EAAD,UACGD,GACC,iCACE,SAAC,EAAD,oDACA,SAAC,EAAD,UACGe,OAAOC,QAAQhB,GAAOiB,KAAI,+BAAEC,EAAF,YAAcvB,EAAd,EAAcA,MAAOC,EAArB,EAAqBA,KAArB,OACzB,SAAC,EAAD,CAAqBD,MAAOA,EAAOC,KAAMA,GAA9BsB,EADc,UAM/B,UAAC,EAAD,YACE,SAAC,EAAD,+CACA,SAAC,EAAD,+EAQX,C","sources":["pages/Streamer/styles.ts","pages/Streamer/Card/styles.ts","pages/Streamer/Card/index.tsx","pages/Streamer/index.tsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Container = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  padding: 1.319vw 4.749vw;\n\n  max-width: 100vw;\n  max-height: 100vh;\n  width: 100vw;\n  height: 100vh;\n\n  background-color: ${({ theme }) => theme.colors.primary};\n`;\n\nexport const Content = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n\n  position: relative;\n\n  width: 100%;\n  height: 100%;\n\n  border-radius: 0.792vw;\n  background-color: ${({ theme }) => theme.colors.primary};\n\n  overflow: hidden;\n\n  &::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n\n    width: 100%;\n    height: 100%;\n\n    border-radius: inherit;\n    border: 0.264vw solid ${({ theme }) => theme.colors.white};\n  }\n`;\n\nexport const Board = styled.div`\n  display: grid;\n  grid-template-columns: repeat(5, minmax(0, 1fr));\n  grid-template-rows: repeat(5, minmax(0, 1fr));\n  grid-gap: 0.528vw;\n`;\n\nexport const TextWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport const Title = styled.p`\n  margin-bottom: 1.319vw;\n\n  font-family: ${({ theme }) => theme.fonts.primary.family};\n  font-weight: ${({ theme }) => theme.fonts.primary.weight};\n  font-size: 36px;\n\n  color: ${({ theme }) => theme.colors.white};\n\n  text-align: center;\n  text-transform: uppercase;\n  text-shadow: 0vw 0.264vw 0.264vw ${({ theme }) => theme.colors.shadow};\n`;\n\nexport const Subtitle = styled(Title)`\n  font-size: 24px;\n`;\n","import styled from 'styled-components';\n\nimport { CardColors } from 'components/Content/Board/Card/styles';\nimport { CardProps } from 'interfaces/Card';\n\ninterface Props {\n  cardType: CardProps['type'];\n}\n\nexport const Container = styled.button<Props>`\n  position: relative;\n\n  padding: 1.055vw;\n\n  border: none;\n  border-radius: 0.792vw;\n  background-color: ${({ cardType }) => CardColors.principal[cardType]};\n  box-shadow: 0vw 0.264vw 0.264vw ${({ theme }) => theme.colors.shadow};\n\n  overflow: hidden;\n\n  &::before {\n    content: '';\n    position: absolute;\n    top: 0.528vw;\n    left: 0.528vw;\n\n    width: calc(100% - 1.055vw);\n    height: calc(100% - 1.055vw);\n\n    border: 0.132vw solid ${({ cardType }) => CardColors.before[cardType]};\n    border-radius: 0.792vw;\n\n    opacity: 0.5;\n  }\n`;\n\nexport const Header = styled.div`\n  display: flex;\n  justify-content: flex-end;\n  align-items: center;\n`;\n\nexport const Content = styled.div<Props>`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  margin-top: 0.396vw;\n  padding: 0.528vw 0.792vw;\n\n  border-radius: 0.264vw;\n  background-color: ${({ cardType }) => CardColors.before[cardType]};\n`;\n\nexport const ContentText = styled.p`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  font-family: ${({ theme }) => theme.fonts.primary.family};\n  font-weight: ${({ theme }) => theme.fonts.primary.weight};\n  font-size: ${({ theme }) => theme.fonts.primary.subtitle};\n\n  color: ${({ theme }) => theme.colors.white};\n\n  letter-spacing: -0.033vw;\n  text-align: center;\n  text-transform: uppercase;\n  text-shadow: 0vw 0.264vw 0.264vw ${({ theme }) => theme.colors.shadow};\n`;\n","import React, { memo } from 'react';\n\nimport { ReactComponent as ProfileCard } from 'assets/profile-card.svg';\nimport { CardColors } from 'components/Content/Board/Card/styles';\nimport { CardProps } from 'interfaces/Card';\n\nimport * as S from './styles';\n\ntype Props = Pick<CardProps, 'title'> & Pick<CardProps, 'type'>;\n\nconst Card: React.FC<Props> = ({ title, type }) => (\n  <S.Container cardType={type}>\n    <S.Header>\n      <ProfileCard fill={CardColors.before[type]} />\n    </S.Header>\n    <S.Content cardType={type}>\n      <S.ContentText>{title}</S.ContentText>\n    </S.Content>\n  </S.Container>\n);\n\nexport default memo(Card);\n","import React, { useEffect, useState } from 'react';\n\nimport { ObjectCardProps } from 'interfaces/Card';\n\nimport * as S from './styles';\nimport Card from './Card';\n\nconst Streamer: React.FC = () => {\n  const [cards, setCards] = useState<ObjectCardProps>({});\n\n  useEffect(() => {\n    const storageCards = localStorage.getItem('@ClueOnStream::cards');\n    if (storageCards) {\n      setCards(JSON.parse(storageCards));\n    }\n  }, []);\n\n  useEffect(() => {\n    const onReceieveMessage = (e: StorageEvent) => {\n      const { key, newValue } = e;\n      if (key === '@ClueOnStream::cards') {\n        setCards(newValue ? JSON.parse(newValue) : {});\n      }\n    };\n\n    window.addEventListener('storage', onReceieveMessage);\n\n    return () => window.removeEventListener('storage', onReceieveMessage);\n  }, [setCards]);\n\n  return (\n    <S.Container>\n      <S.Content>\n        {cards ? (\n          <>\n            <S.Title>Dê as dicas baseado nestas cartas</S.Title>\n            <S.Board>\n              {Object.entries(cards).map(([titleKey, { title, type }]) => (\n                <Card key={titleKey} title={title} type={type} />\n              ))}\n            </S.Board>\n          </>\n        ) : (\n          <S.TextWrapper>\n            <S.Title>Aguardando início da partida</S.Title>\n            <S.Subtitle>\n              Posicione esta tela de forma que não apareça na live\n            </S.Subtitle>\n          </S.TextWrapper>\n        )}\n      </S.Content>\n    </S.Container>\n  );\n};\n\nexport default Streamer;\n"],"names":["Container","styled","theme","colors","primary","Content","white","Board","TextWrapper","Title","fonts","family","weight","shadow","Subtitle","cardType","CardColors","Header","ContentText","subtitle","Card","title","type","fill","memo","useState","cards","setCards","useEffect","storageCards","localStorage","getItem","JSON","parse","onReceieveMessage","e","key","newValue","window","addEventListener","removeEventListener","Object","entries","map","titleKey"],"sourceRoot":""}